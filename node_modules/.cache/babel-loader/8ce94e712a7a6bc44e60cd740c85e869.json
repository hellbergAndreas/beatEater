{"ast":null,"code":"var _jsxFileName = \"/Users/andreashellberg/Desktop/programmeringsprojekt/beatEater/src/components/instrument-board/slots/slot.jsx\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Howl } from \"howler\";\nimport { sendSlotInfoToStore } from \"../../../redux/instrument-preset/isntrument.action\";\nimport \"./slot.styles.scss\";\n\nclass Slot extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.playSound = () => {\n      const src = this.props.instrument;\n      let audioEl = new Howl({\n        src\n      });\n\n      if (src.includes(\"/ho\")) {\n        audioEl.volume(0.7);\n      } else if (src.includes(\"/hh\")) {\n        audioEl.volume(0.5);\n      }\n\n      audioEl.play();\n    };\n\n    this.loadSlotWithSound = e => {\n      const slotInfo = {\n        loaded: true,\n        instrument: this.props.name,\n        number: this.props.number\n      };\n\n      const checkStoreForSlotInfo = () => {\n        if (!this.props.preset.preset[this.slotNameInStore]) {}\n      };\n\n      checkStoreForSlotInfo(); // const slotInfo = {\n      //   loaded: !this.props.preset.preset[this.slotNameInStore].loaded,\n      //   instrument: this.props.name,\n      //   number: this.props.number,\n      // }\n      // this.props.sendSlotInfoToStore(slotInfo)\n    };\n\n    this.slotNameInStore = `${this.props.name}${this.props.number}`;\n    this.state = {\n      loaded: false\n    };\n  }\n\n  componentDidMount() {}\n\n  componentDidUpdate() {\n    let {\n      number,\n      time: {\n        time\n      }\n    } = this.props;\n\n    if (number === time && this.props.preset.preset[this.slotNameInStore].loaded) {\n      this.playSound();\n    } // this.props.sendSlotInfoToStore(this.state)\n    // console.log(this.props)\n\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      onClick: e => this.loadSlotWithSound(e),\n      className: `instrumentBoard__slotRow__slot ${this.props.number === this.props.time.time ? \"instrumentBoard__slotRow__slot__active active\" : \"\"}\n        `,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 7\n      }\n    });\n  }\n\n} //  ${\n//    this.state.loaded\n//      ? \"instrumentBoard__slotRow__slot__loaded loaded\"\n//      : \"\"\n//  }\n\n\nconst mapStateToProps = state => ({\n  time: state.time,\n  preset: state.preset\n});\n\nconst mapDispatchToProps = dispatch => ({\n  sendSlotInfoToStore: slotInfo => dispatch(sendSlotInfoToStore(slotInfo))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Slot);","map":{"version":3,"sources":["/Users/andreashellberg/Desktop/programmeringsprojekt/beatEater/src/components/instrument-board/slots/slot.jsx"],"names":["React","connect","Howl","sendSlotInfoToStore","Slot","Component","constructor","props","playSound","src","instrument","audioEl","includes","volume","play","loadSlotWithSound","e","slotInfo","loaded","name","number","checkStoreForSlotInfo","preset","slotNameInStore","state","componentDidMount","componentDidUpdate","time","render","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport { connect } from \"react-redux\"\nimport { Howl } from \"howler\"\nimport { sendSlotInfoToStore } from \"../../../redux/instrument-preset/isntrument.action\"\n\nimport \"./slot.styles.scss\"\n\nclass Slot extends React.Component {\n  constructor(props) {\n    super(props)\n    this.slotNameInStore = `${this.props.name}${this.props.number}`\n    this.state = {\n      loaded: false,\n    }\n  }\n  componentDidMount() {}\n  componentDidUpdate() {\n    let {\n      number,\n      time: { time },\n    } = this.props\n\n    if (\n      number === time &&\n      this.props.preset.preset[this.slotNameInStore].loaded\n    ) {\n      this.playSound()\n    }\n\n    // this.props.sendSlotInfoToStore(this.state)\n    // console.log(this.props)\n  }\n\n  playSound = () => {\n    const src = this.props.instrument\n    let audioEl = new Howl({\n      src,\n    })\n    if (src.includes(\"/ho\")) {\n      audioEl.volume(0.7)\n    } else if (src.includes(\"/hh\")) {\n      audioEl.volume(0.5)\n    }\n    audioEl.play()\n  }\n  loadSlotWithSound = (e) => {\n    const slotInfo = {\n      loaded: true,\n      instrument: this.props.name,\n      number: this.props.number,\n    }\n    const checkStoreForSlotInfo = () => {\n      if (!this.props.preset.preset[this.slotNameInStore]) {\n      }\n    }\n    checkStoreForSlotInfo()\n    // const slotInfo = {\n    //   loaded: !this.props.preset.preset[this.slotNameInStore].loaded,\n    //   instrument: this.props.name,\n    //   number: this.props.number,\n    // }\n    // this.props.sendSlotInfoToStore(slotInfo)\n  }\n\n  render() {\n    return (\n      <div\n        onClick={(e) => this.loadSlotWithSound(e)}\n        className={`instrumentBoard__slotRow__slot ${\n          this.props.number === this.props.time.time\n            ? \"instrumentBoard__slotRow__slot__active active\"\n            : \"\"\n        }\n        `}\n      ></div>\n    )\n  }\n}\n//  ${\n//    this.state.loaded\n//      ? \"instrumentBoard__slotRow__slot__loaded loaded\"\n//      : \"\"\n//  }\n\nconst mapStateToProps = (state) => ({\n  time: state.time,\n  preset: state.preset,\n})\nconst mapDispatchToProps = (dispatch) => ({\n  sendSlotInfoToStore: (slotInfo) => dispatch(sendSlotInfoToStore(slotInfo)),\n})\nexport default connect(mapStateToProps, mapDispatchToProps)(Slot)\n"]},"metadata":{},"sourceType":"module"}
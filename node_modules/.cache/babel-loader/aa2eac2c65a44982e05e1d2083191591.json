{"ast":null,"code":"var _jsxFileName = \"/Users/andreashellberg/Desktop/programmeringsprojekt/beatEater/src/components/instrument-board/slots/slot.jsx\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport \"./slot.styles.scss\";\n\nclass Slot extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.playSound = () => {\n      let audioEl = new Audio(this.props.instrument);\n      audioEl.cloneNode(true).play();\n    };\n\n    this.loadSlotWithSound = e => {\n      this.setState(state => {\n        return {\n          loaded: !state.loaded\n        };\n      });\n    };\n\n    this.state = {\n      loaded: false\n    };\n  }\n\n  componentDidMount() {// gathering all the imported sounds and collects them in an Object\n    // creates a new Adio, which is collected from the sounds-Object\n    // the instrument that matches the name in the sounds objects get set to state\n  }\n\n  componentDidUpdate() {\n    //destructuring props\n    let {\n      number,\n      time: {\n        time\n      }\n    } = this.props; // if slotnumber === current time && has been clicked ( is loaded)\n    // we play the sounds\n\n    if (number === time && this.state.loaded) {\n      this.playSound();\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      onClick: e => this.loadSlotWithSound(e),\n      className: `instrumentSlot ${this.props.number === this.props.time.time ? \"active\" : \"\"} ${this.state.loaded ? \"loaded\" : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 7\n      }\n    });\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  time: state.time\n});\n\nexport default connect(mapStateToProps)(Slot);","map":{"version":3,"sources":["/Users/andreashellberg/Desktop/programmeringsprojekt/beatEater/src/components/instrument-board/slots/slot.jsx"],"names":["React","connect","Slot","Component","constructor","props","playSound","audioEl","Audio","instrument","cloneNode","play","loadSlotWithSound","e","setState","state","loaded","componentDidMount","componentDidUpdate","number","time","render","mapStateToProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAO,oBAAP;;AAEA,MAAMC,IAAN,SAAmBF,KAAK,CAACG,SAAzB,CAAmC;AACjCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAyBnBC,SAzBmB,GAyBP,MAAM;AAChB,UAAIC,OAAO,GAAG,IAAIC,KAAJ,CAAU,KAAKH,KAAL,CAAWI,UAArB,CAAd;AAEAF,MAAAA,OAAO,CAACG,SAAR,CAAkB,IAAlB,EAAwBC,IAAxB;AACD,KA7BkB;;AAAA,SA8BnBC,iBA9BmB,GA8BEC,CAAD,IAAO;AACzB,WAAKC,QAAL,CAAeC,KAAD,IAAW;AACvB,eAAO;AAAEC,UAAAA,MAAM,EAAE,CAACD,KAAK,CAACC;AAAjB,SAAP;AACD,OAFD;AAGD,KAlCkB;;AAEjB,SAAKD,KAAL,GAAa;AACXC,MAAAA,MAAM,EAAE;AADG,KAAb;AAGD;;AACDC,EAAAA,iBAAiB,GAAG,CAClB;AACA;AACA;AACD;;AACDC,EAAAA,kBAAkB,GAAG;AACnB;AACA,QAAI;AACFC,MAAAA,MADE;AAEFC,MAAAA,IAAI,EAAE;AAAEA,QAAAA;AAAF;AAFJ,QAGA,KAAKf,KAHT,CAFmB,CAOnB;AACA;;AACA,QAAIc,MAAM,KAAKC,IAAX,IAAmB,KAAKL,KAAL,CAAWC,MAAlC,EAA0C;AACxC,WAAKV,SAAL;AACD;AACF;;AAaDe,EAAAA,MAAM,GAAG;AACP,wBACE;AACE,MAAA,OAAO,EAAGR,CAAD,IAAO,KAAKD,iBAAL,CAAuBC,CAAvB,CADlB;AAEE,MAAA,SAAS,EAAG,kBACV,KAAKR,KAAL,CAAWc,MAAX,KAAsB,KAAKd,KAAL,CAAWe,IAAX,CAAgBA,IAAtC,GAA6C,QAA7C,GAAwD,EACzD,IAAG,KAAKL,KAAL,CAAWC,MAAX,GAAoB,QAApB,GAA+B,EAAG,EAJxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAQD;;AA9CgC;;AAiDnC,MAAMM,eAAe,GAAIP,KAAD,KAAY;AAClCK,EAAAA,IAAI,EAAEL,KAAK,CAACK;AADsB,CAAZ,CAAxB;;AAGA,eAAenB,OAAO,CAACqB,eAAD,CAAP,CAAyBpB,IAAzB,CAAf","sourcesContent":["import React from \"react\"\nimport { connect } from \"react-redux\"\nimport \"./slot.styles.scss\"\n\nclass Slot extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      loaded: false,\n    }\n  }\n  componentDidMount() {\n    // gathering all the imported sounds and collects them in an Object\n    // creates a new Adio, which is collected from the sounds-Object\n    // the instrument that matches the name in the sounds objects get set to state\n  }\n  componentDidUpdate() {\n    //destructuring props\n    let {\n      number,\n      time: { time },\n    } = this.props\n\n    // if slotnumber === current time && has been clicked ( is loaded)\n    // we play the sounds\n    if (number === time && this.state.loaded) {\n      this.playSound()\n    }\n  }\n\n  playSound = () => {\n    let audioEl = new Audio(this.props.instrument)\n\n    audioEl.cloneNode(true).play()\n  }\n  loadSlotWithSound = (e) => {\n    this.setState((state) => {\n      return { loaded: !state.loaded }\n    })\n  }\n\n  render() {\n    return (\n      <div\n        onClick={(e) => this.loadSlotWithSound(e)}\n        className={`instrumentSlot ${\n          this.props.number === this.props.time.time ? \"active\" : \"\"\n        } ${this.state.loaded ? \"loaded\" : \"\"}`}\n      ></div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  time: state.time,\n})\nexport default connect(mapStateToProps)(Slot)\n"]},"metadata":{},"sourceType":"module"}
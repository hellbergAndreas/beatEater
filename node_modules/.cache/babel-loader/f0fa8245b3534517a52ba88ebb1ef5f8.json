{"ast":null,"code":"var _jsxFileName = \"/Users/andreashellberg/Desktop/programmeringsprojekt/beatEater/src/components/instrument-board/slots/slot.jsx\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Howl } from \"howler\";\nimport { sendSlotInfoToStore } from \"../../../redux/instrument-preset/isntrument.action\";\nimport \"./slot.styles.scss\";\n\nclass Slot extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.playSound = () => {\n      const src = this.props.instrument;\n      let audioEl = new Howl({\n        src\n      });\n\n      if (src.includes(\"/ho\")) {\n        audioEl.volume(0.7);\n      } else if (src.includes(\"/hh\")) {\n        audioEl.volume(0.5);\n      }\n\n      audioEl.play();\n    };\n\n    this.loadSlotWithSound = e => {\n      const slotPosition = `${this.props.instrument}${this.props.number}`;\n      const slotInformationFromStore = this.props.preset.preset[slotPosition];\n      const slotInfo = {\n        loaded: true,\n        instrument: this.props.instrument,\n        number: this.props.number\n      };\n      this.props.sendSlotInfoToStore(slotInfo);\n    };\n  }\n\n  componentDidMount() {\n    this.props.sendSlotInfoToStore({\n      loaded: false,\n      instrument: this.props.instrument,\n      number: this.props.number\n    });\n  }\n\n  componentDidUpdate() {\n    let {\n      number,\n      time: {\n        time\n      }\n    } = this.props; // first we need to access the slot in store, its named after\n    // slot instrument + number. With slotposition we concat the correct instrument\n\n    const slotPosition = `${this.props.instrument}${this.props.number}`;\n    const slotInformationFromStore = this.props.preset.preset[slotPosition];\n\n    if (number === time && slotInformationFromStore.loaded) {\n      this.playSound();\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      onClick: e => this.loadSlotWithSound(e),\n      className: `instrumentBoard__slotRow__slot ${this.props.number === this.props.time.time ? \"instrumentBoard__slotRow__slot__active active\" : \"\"}\n\n        `,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 7\n      }\n    });\n  } // render() {\n  //   return (\n  //     <div\n  //       onClick={(e) => this.loadSlotWithSound(e)}\n  //       className={`instrumentBoard__slotRow__slot ${\n  //         this.props.number === this.props.time.time\n  //           ? \"instrumentBoard__slotRow__slot__active active\"\n  //           : \"\"\n  //       }\n  //        ${\n  //          this.state.loaded\n  //            ? \"instrumentBoard__slotRow__slot__loaded loaded\"\n  //            : \"\"\n  //        }\n  //       `}\n  //     ></div>\n  //   )\n  // }\n\n\n}\n\nconst mapStateToProps = state => ({\n  time: state.time,\n  preset: state.preset\n});\n\nconst mapDispatchToProps = dispatch => ({\n  sendSlotInfoToStore: slotInfo => dispatch(sendSlotInfoToStore(slotInfo))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Slot);","map":{"version":3,"sources":["/Users/andreashellberg/Desktop/programmeringsprojekt/beatEater/src/components/instrument-board/slots/slot.jsx"],"names":["React","connect","Howl","sendSlotInfoToStore","Slot","Component","playSound","src","props","instrument","audioEl","includes","volume","play","loadSlotWithSound","e","slotPosition","number","slotInformationFromStore","preset","slotInfo","loaded","componentDidMount","componentDidUpdate","time","render","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport { connect } from \"react-redux\"\nimport { Howl } from \"howler\"\nimport { sendSlotInfoToStore } from \"../../../redux/instrument-preset/isntrument.action\"\n\nimport \"./slot.styles.scss\"\n\nclass Slot extends React.Component {\n  componentDidMount() {\n    this.props.sendSlotInfoToStore({\n      loaded: false,\n      instrument: this.props.instrument,\n      number: this.props.number,\n    })\n  }\n  componentDidUpdate() {\n    let {\n      number,\n      time: { time },\n    } = this.props\n\n    // first we need to access the slot in store, its named after\n    // slot instrument + number. With slotposition we concat the correct instrument\n    const slotPosition = `${this.props.instrument}${this.props.number}`\n    const slotInformationFromStore = this.props.preset.preset[slotPosition]\n\n    if (number === time && slotInformationFromStore.loaded) {\n      this.playSound()\n    }\n  }\n\n  playSound = () => {\n    const src = this.props.instrument\n    let audioEl = new Howl({\n      src,\n    })\n    if (src.includes(\"/ho\")) {\n      audioEl.volume(0.7)\n    } else if (src.includes(\"/hh\")) {\n      audioEl.volume(0.5)\n    }\n    audioEl.play()\n  }\n  loadSlotWithSound = (e) => {\n    const slotPosition = `${this.props.instrument}${this.props.number}`\n    const slotInformationFromStore = this.props.preset.preset[slotPosition]\n    const slotInfo = {\n      loaded: true,\n      instrument: this.props.instrument,\n      number: this.props.number,\n    }\n    this.props.sendSlotInfoToStore(slotInfo)\n  }\n\n  render() {\n    return (\n      <div\n        onClick={(e) => this.loadSlotWithSound(e)}\n        className={`instrumentBoard__slotRow__slot ${\n          this.props.number === this.props.time.time\n            ? \"instrumentBoard__slotRow__slot__active active\"\n            : \"\"\n        }\n\n        `}\n      ></div>\n    )\n  }\n\n  // render() {\n  //   return (\n  //     <div\n  //       onClick={(e) => this.loadSlotWithSound(e)}\n  //       className={`instrumentBoard__slotRow__slot ${\n  //         this.props.number === this.props.time.time\n  //           ? \"instrumentBoard__slotRow__slot__active active\"\n  //           : \"\"\n  //       }\n  //        ${\n  //          this.state.loaded\n  //            ? \"instrumentBoard__slotRow__slot__loaded loaded\"\n  //            : \"\"\n  //        }\n  //       `}\n  //     ></div>\n  //   )\n  // }\n}\n\nconst mapStateToProps = (state) => ({\n  time: state.time,\n  preset: state.preset,\n})\nconst mapDispatchToProps = (dispatch) => ({\n  sendSlotInfoToStore: (slotInfo) => dispatch(sendSlotInfoToStore(slotInfo)),\n})\nexport default connect(mapStateToProps, mapDispatchToProps)(Slot)\n"]},"metadata":{},"sourceType":"module"}
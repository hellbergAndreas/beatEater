{"ast":null,"code":"const INITIAL_STATE = {\n  preset: {\n    hh1: {\n      loaded: true\n    },\n    hh3: {\n      loaded: true\n    },\n    hh8: {\n      loaded: true\n    }\n  }\n};\n\nconst InstrumentPresetReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case \"SEND_SLOT_INFO\":\n      return { ...state,\n        preset: { ...state.preset,\n          [`${action.payload.instrument}${action.payload.number}`]: action.payload.loaded\n        }\n      };\n\n    case \"REMOVE_SLOT_INFO\":\n      let newPreset = state.preset;\n      delete newPreset[action.payload];\n      return { ...state,\n        preset: newPreset\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default InstrumentPresetReducer;","map":{"version":3,"sources":["/Users/andreashellberg/Desktop/programmeringsprojekt/beatEater/src/redux/instrument-preset/instrument-preset.reducer.js"],"names":["INITIAL_STATE","preset","hh1","loaded","hh3","hh8","InstrumentPresetReducer","state","action","type","payload","instrument","number","newPreset"],"mappings":"AAAA,MAAMA,aAAa,GAAG;AACpBC,EAAAA,MAAM,EAAE;AACNC,IAAAA,GAAG,EAAE;AAAEC,MAAAA,MAAM,EAAE;AAAV,KADC;AAENC,IAAAA,GAAG,EAAE;AAAED,MAAAA,MAAM,EAAE;AAAV,KAFC;AAGNE,IAAAA,GAAG,EAAE;AAAEF,MAAAA,MAAM,EAAE;AAAV;AAHC;AADY,CAAtB;;AAQA,MAAMG,uBAAuB,GAAG,CAACC,KAAK,GAAGP,aAAT,EAAwBQ,MAAxB,KAAmC;AACjE,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,gBAAL;AACE,aAAO,EACL,GAAGF,KADE;AAELN,QAAAA,MAAM,EAAE,EACN,GAAGM,KAAK,CAACN,MADH;AAEN,WAAE,GAAEO,MAAM,CAACE,OAAP,CAAeC,UAAW,GAAEH,MAAM,CAACE,OAAP,CAAeE,MAAO,EAAtD,GAA0DJ,MAAM,CAC7DE,OADuD,CAC/CP;AAHL;AAFH,OAAP;;AAQF,SAAK,kBAAL;AACE,UAAIU,SAAS,GAAGN,KAAK,CAACN,MAAtB;AACA,aAAOY,SAAS,CAACL,MAAM,CAACE,OAAR,CAAhB;AACA,aAAO,EACL,GAAGH,KADE;AAELN,QAAAA,MAAM,EAAEY;AAFH,OAAP;;AAIF;AACE,aAAON,KAAP;AAlBJ;AAoBD,CArBD;;AAuBA,eAAeD,uBAAf","sourcesContent":["const INITIAL_STATE = {\n  preset: {\n    hh1: { loaded: true },\n    hh3: { loaded: true },\n    hh8: { loaded: true },\n  },\n}\n\nconst InstrumentPresetReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case \"SEND_SLOT_INFO\":\n      return {\n        ...state,\n        preset: {\n          ...state.preset,\n          [`${action.payload.instrument}${action.payload.number}`]: action\n            .payload.loaded,\n        },\n      }\n    case \"REMOVE_SLOT_INFO\":\n      let newPreset = state.preset\n      delete newPreset[action.payload]\n      return {\n        ...state,\n        preset: newPreset,\n      }\n    default:\n      return state\n  }\n}\n\nexport default InstrumentPresetReducer\n"]},"metadata":{},"sourceType":"module"}
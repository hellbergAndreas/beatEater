{"ast":null,"code":"var _jsxFileName = \"/Users/andreashellberg/Desktop/programmeringsprojekt/beatEater/src/components/instrument-board/slots/slot.jsx\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Howl } from \"howler\";\nimport { sendSlotInfoToStore } from \"../../../redux/instrument-preset/isntrument.action\";\nimport \"./slot.styles.scss\";\n\nclass Slot extends React.Component {\n  constructor(_props) {\n    super(_props);\n\n    this.playSound = () => {\n      const src = this.props.instrument;\n      let audioEl = new Howl({\n        src\n      });\n\n      if (src.includes(\"/ho\")) {\n        audioEl.volume(0.7);\n      } else if (src.includes(\"/hh\")) {\n        audioEl.volume(0.5);\n      }\n\n      audioEl.play();\n    };\n\n    this.loadSlotWithSound = e => {\n      this.setState(state => {\n        return {\n          loaded: !state.loaded\n        };\n      });\n    };\n\n    this.collectPresetFromStore = () => {\n      console.log(props);\n    };\n\n    this.state = {\n      loaded: false,\n      slotInfo: {\n        instrument: this.props.name,\n        number: this.props.number\n      }\n    };\n  }\n\n  componentDidMount() {}\n\n  componentDidUpdate() {\n    let {\n      number,\n      time: {\n        time\n      }\n    } = this.props; // if slotnumber === current time && has been clicked ( is loaded)\n    // we play the sounds\n\n    if (number === time && this.state.loaded) {\n      this.playSound();\n    }\n\n    this.props.sendSlotInfoToStore(this.state);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      onClick: e => this.loadSlotWithSound(e),\n      className: `instrumentBoard__slotRow__slot ${this.props.number === this.props.time.time ? \"instrumentBoard__slotRow__slot__active active\" : \"\"} ${this.state.loaded ? \"instrumentBoard__slotRow__slot__loaded loaded\" : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 7\n      }\n    });\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  time: state.time,\n  preset: state.preset\n});\n\nconst mapDispatchToProps = dispatch => ({\n  sendSlotInfoToStore: slotInfo => dispatch(sendSlotInfoToStore(slotInfo))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Slot);","map":{"version":3,"sources":["/Users/andreashellberg/Desktop/programmeringsprojekt/beatEater/src/components/instrument-board/slots/slot.jsx"],"names":["React","connect","Howl","sendSlotInfoToStore","Slot","Component","constructor","props","playSound","src","instrument","audioEl","includes","volume","play","loadSlotWithSound","e","setState","state","loaded","collectPresetFromStore","console","log","slotInfo","name","number","componentDidMount","componentDidUpdate","time","render","mapStateToProps","preset","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,IAAT,QAAqB,QAArB;AACA,SAASC,mBAAT,QAAoC,oDAApC;AAEA,OAAO,oBAAP;;AAEA,MAAMC,IAAN,SAAmBJ,KAAK,CAACK,SAAzB,CAAmC;AACjCC,EAAAA,WAAW,CAACC,MAAD,EAAQ;AACjB,UAAMA,MAAN;;AADiB,SAyBnBC,SAzBmB,GAyBP,MAAM;AAChB,YAAMC,GAAG,GAAG,KAAKF,KAAL,CAAWG,UAAvB;AACA,UAAIC,OAAO,GAAG,IAAIT,IAAJ,CAAS;AACrBO,QAAAA;AADqB,OAAT,CAAd;;AAGA,UAAIA,GAAG,CAACG,QAAJ,CAAa,KAAb,CAAJ,EAAyB;AACvBD,QAAAA,OAAO,CAACE,MAAR,CAAe,GAAf;AACD,OAFD,MAEO,IAAIJ,GAAG,CAACG,QAAJ,CAAa,KAAb,CAAJ,EAAyB;AAC9BD,QAAAA,OAAO,CAACE,MAAR,CAAe,GAAf;AACD;;AACDF,MAAAA,OAAO,CAACG,IAAR;AACD,KApCkB;;AAAA,SAqCnBC,iBArCmB,GAqCEC,CAAD,IAAO;AACzB,WAAKC,QAAL,CAAeC,KAAD,IAAW;AACvB,eAAO;AAAEC,UAAAA,MAAM,EAAE,CAACD,KAAK,CAACC;AAAjB,SAAP;AACD,OAFD;AAGD,KAzCkB;;AAAA,SA0CnBC,sBA1CmB,GA0CM,MAAM;AAC7BC,MAAAA,OAAO,CAACC,GAAR,CAAYf,KAAZ;AACD,KA5CkB;;AAEjB,SAAKW,KAAL,GAAa;AACXC,MAAAA,MAAM,EAAE,KADG;AAEXI,MAAAA,QAAQ,EAAE;AACRb,QAAAA,UAAU,EAAE,KAAKH,KAAL,CAAWiB,IADf;AAERC,QAAAA,MAAM,EAAE,KAAKlB,KAAL,CAAWkB;AAFX;AAFC,KAAb;AAOD;;AACDC,EAAAA,iBAAiB,GAAG,CAAE;;AACtBC,EAAAA,kBAAkB,GAAG;AACnB,QAAI;AACFF,MAAAA,MADE;AAEFG,MAAAA,IAAI,EAAE;AAAEA,QAAAA;AAAF;AAFJ,QAGA,KAAKrB,KAHT,CADmB,CAMnB;AACA;;AACA,QAAIkB,MAAM,KAAKG,IAAX,IAAmB,KAAKV,KAAL,CAAWC,MAAlC,EAA0C;AACxC,WAAKX,SAAL;AACD;;AACD,SAAKD,KAAL,CAAWJ,mBAAX,CAA+B,KAAKe,KAApC;AACD;;AAuBDW,EAAAA,MAAM,GAAG;AACP,wBACE;AACE,MAAA,OAAO,EAAGb,CAAD,IAAO,KAAKD,iBAAL,CAAuBC,CAAvB,CADlB;AAEE,MAAA,SAAS,EAAG,kCACV,KAAKT,KAAL,CAAWkB,MAAX,KAAsB,KAAKlB,KAAL,CAAWqB,IAAX,CAAgBA,IAAtC,GACI,+CADJ,GAEI,EACL,IACC,KAAKV,KAAL,CAAWC,MAAX,GACI,+CADJ,GAEI,EACL,EAVH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAcD;;AA9DgC;;AAiEnC,MAAMW,eAAe,GAAIZ,KAAD,KAAY;AAClCU,EAAAA,IAAI,EAAEV,KAAK,CAACU,IADsB;AAElCG,EAAAA,MAAM,EAAEb,KAAK,CAACa;AAFoB,CAAZ,CAAxB;;AAIA,MAAMC,kBAAkB,GAAIC,QAAD,KAAe;AACxC9B,EAAAA,mBAAmB,EAAGoB,QAAD,IAAcU,QAAQ,CAAC9B,mBAAmB,CAACoB,QAAD,CAApB;AADH,CAAf,CAA3B;;AAGA,eAAetB,OAAO,CAAC6B,eAAD,EAAkBE,kBAAlB,CAAP,CAA6C5B,IAA7C,CAAf","sourcesContent":["import React from \"react\"\nimport { connect } from \"react-redux\"\nimport { Howl } from \"howler\"\nimport { sendSlotInfoToStore } from \"../../../redux/instrument-preset/isntrument.action\"\n\nimport \"./slot.styles.scss\"\n\nclass Slot extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      loaded: false,\n      slotInfo: {\n        instrument: this.props.name,\n        number: this.props.number,\n      },\n    }\n  }\n  componentDidMount() {}\n  componentDidUpdate() {\n    let {\n      number,\n      time: { time },\n    } = this.props\n\n    // if slotnumber === current time && has been clicked ( is loaded)\n    // we play the sounds\n    if (number === time && this.state.loaded) {\n      this.playSound()\n    }\n    this.props.sendSlotInfoToStore(this.state)\n  }\n\n  playSound = () => {\n    const src = this.props.instrument\n    let audioEl = new Howl({\n      src,\n    })\n    if (src.includes(\"/ho\")) {\n      audioEl.volume(0.7)\n    } else if (src.includes(\"/hh\")) {\n      audioEl.volume(0.5)\n    }\n    audioEl.play()\n  }\n  loadSlotWithSound = (e) => {\n    this.setState((state) => {\n      return { loaded: !state.loaded }\n    })\n  }\n  collectPresetFromStore = () => {\n    console.log(props)\n  }\n\n  render() {\n    return (\n      <div\n        onClick={(e) => this.loadSlotWithSound(e)}\n        className={`instrumentBoard__slotRow__slot ${\n          this.props.number === this.props.time.time\n            ? \"instrumentBoard__slotRow__slot__active active\"\n            : \"\"\n        } ${\n          this.state.loaded\n            ? \"instrumentBoard__slotRow__slot__loaded loaded\"\n            : \"\"\n        }`}\n      ></div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  time: state.time,\n  preset: state.preset,\n})\nconst mapDispatchToProps = (dispatch) => ({\n  sendSlotInfoToStore: (slotInfo) => dispatch(sendSlotInfoToStore(slotInfo)),\n})\nexport default connect(mapStateToProps, mapDispatchToProps)(Slot)\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/andreashellberg/Desktop/programmeringsprojekt/beatEater/src/components/instrument-board/slots/slot.jsx\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport \"./slot.styles.scss\";\nimport { importSound } from \"../sounds/sounds\";\nimport bd from \"../../../sounds/bd.mp3\";\nimport hh from \"../../../sounds/hh.mp3\";\n\nclass Slot extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.playSound = () => {\n      let audioEl = this.state.slotSound;\n      audioEl.cloneNode(true).play();\n    };\n\n    this.loadSlotWithSound = e => {\n      this.setState(state => {\n        return {\n          loaded: !state.loaded\n        };\n      });\n    };\n\n    this.state = {\n      loaded: false,\n      slotSound: null\n    };\n  }\n\n  componentDidMount() {\n    const sounds = {\n      bd: bd,\n      hh: hh\n    };\n    let sound = new Audio(sounds[this.props.instrument]);\n    this.setState(state => {\n      return { ...state,\n        slotSound: sound\n      };\n    });\n  }\n\n  componentDidUpdate() {\n    console.log(slotSound);\n    let {\n      number,\n      time: {\n        time\n      }\n    } = this.props;\n\n    if (number === time && this.state.loaded) {\n      this.playSound();\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      onClick: e => this.loadSlotWithSound(e),\n      className: `instrumentSlot ${this.props.number === this.props.time.time ? \"active\" : \"\"} ${this.state.loaded ? \"loaded\" : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"audio\", {\n      className: \"audio-element\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"source\", {\n      src: importSound(this.props.instrument),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }\n    })));\n  }\n\n} // class Slot extends React.Component {\n//   playSound = () => {\n//     const audioEl = document.getElementsByClassName(\"audio-element\")[0]\n//     audioEl.cloneNode(true).play()\n//   }\n//   render() {\n//     return (\n//       <div className=\"instrumentSlot\" onClick={() => this.playSound()}>\n//         <audio className=\"audio-element\">\n//           <source src={bd}></source>\n//         </audio>\n//       </div>\n//     )\n//   }\n// }\n// const Slot = ({ instrument, number, time: { time } }) => {\n//   // check if global time === this.props.number\n//   const playSound = () => {\n//     const audioEl = document.getElementsByClassName(\"audio-element\")[0]\n//     audioEl.cloneNode(true).play()\n//   }\n//   const setClassName = (e) => {\n//     e.target.classList.toggle(\"loaded\")\n//     playSound()\n//   }\n//   return (\n//     <div\n//       onClick={(e) => setClassName(e)}\n//       className={`${number === time ? \"active\" : \"\"} instrumentSlot`}\n//     >\n//       <audio className=\"audio-element\">\n//         <source src={importSound(instrument)}></source>\n//         {/* <source src=\"../../../sounds/hh.mp3\"></source> */}\n//       </audio>\n//     </div>\n//   )\n// }\n\n\nconst mapStateToProps = state => ({\n  time: state.time\n});\n\nexport default connect(mapStateToProps)(Slot);","map":{"version":3,"sources":["/Users/andreashellberg/Desktop/programmeringsprojekt/beatEater/src/components/instrument-board/slots/slot.jsx"],"names":["React","connect","importSound","bd","hh","Slot","Component","constructor","props","playSound","audioEl","state","slotSound","cloneNode","play","loadSlotWithSound","e","setState","loaded","componentDidMount","sounds","sound","Audio","instrument","componentDidUpdate","console","log","number","time","render","mapStateToProps"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport { connect } from \"react-redux\"\nimport \"./slot.styles.scss\"\nimport { importSound } from \"../sounds/sounds\"\n\nimport bd from \"../../../sounds/bd.mp3\"\nimport hh from \"../../../sounds/hh.mp3\"\n\nclass Slot extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      loaded: false,\n      slotSound: null,\n    }\n  }\n  componentDidMount() {\n    const sounds = {\n      bd: bd,\n      hh: hh,\n    }\n    let sound = new Audio(sounds[this.props.instrument])\n\n    this.setState((state) => {\n      return { ...state, slotSound: sound }\n    })\n  }\n  componentDidUpdate() {\n    console.log(slotSound)\n    let {\n      number,\n      time: { time },\n    } = this.props\n    if (number === time && this.state.loaded) {\n      this.playSound()\n    }\n  }\n\n  playSound = () => {\n    let audioEl = this.state.slotSound\n    audioEl.cloneNode(true).play()\n  }\n  loadSlotWithSound = (e) => {\n    this.setState((state) => {\n      return { loaded: !state.loaded }\n    })\n  }\n\n  render() {\n    return (\n      <div\n        onClick={(e) => this.loadSlotWithSound(e)}\n        className={`instrumentSlot ${\n          this.props.number === this.props.time.time ? \"active\" : \"\"\n        } ${this.state.loaded ? \"loaded\" : \"\"}`}\n      >\n        <audio className=\"audio-element\">\n          <source src={importSound(this.props.instrument)}></source>\n        </audio>\n      </div>\n    )\n  }\n}\n\n// class Slot extends React.Component {\n//   playSound = () => {\n//     const audioEl = document.getElementsByClassName(\"audio-element\")[0]\n//     audioEl.cloneNode(true).play()\n//   }\n//   render() {\n//     return (\n//       <div className=\"instrumentSlot\" onClick={() => this.playSound()}>\n//         <audio className=\"audio-element\">\n//           <source src={bd}></source>\n//         </audio>\n//       </div>\n//     )\n//   }\n// }\n// const Slot = ({ instrument, number, time: { time } }) => {\n//   // check if global time === this.props.number\n\n//   const playSound = () => {\n//     const audioEl = document.getElementsByClassName(\"audio-element\")[0]\n//     audioEl.cloneNode(true).play()\n//   }\n//   const setClassName = (e) => {\n//     e.target.classList.toggle(\"loaded\")\n//     playSound()\n//   }\n\n//   return (\n//     <div\n//       onClick={(e) => setClassName(e)}\n//       className={`${number === time ? \"active\" : \"\"} instrumentSlot`}\n//     >\n//       <audio className=\"audio-element\">\n//         <source src={importSound(instrument)}></source>\n//         {/* <source src=\"../../../sounds/hh.mp3\"></source> */}\n//       </audio>\n//     </div>\n//   )\n// }\nconst mapStateToProps = (state) => ({\n  time: state.time,\n})\nexport default connect(mapStateToProps)(Slot)\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"const INITIAL_STATE = {\n  preset: {}\n};\n\nconst InstrumentPresetReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case \"SEND_SLOT_INFO\":\n      return { ...state,\n        preset: { ...state.preset,\n          [`${action.payload.instrument}${action.payload.number}`]: {\n            slotNumber: action.payload.number,\n            instrument: action.payload.instrument,\n            loaded: action.payload.loaded\n          }\n        }\n      };\n\n    case \"REMOVE_SLOT_INFO\":\n      return { ...state,\n        preset: Object.keys(state.preset).filter(slot => {\n          return preset;\n        })\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default InstrumentPresetReducer;","map":{"version":3,"sources":["/Users/andreashellberg/Desktop/programmeringsprojekt/beatEater/src/redux/instrument-preset/instrument-preset.reducer.js"],"names":["INITIAL_STATE","preset","InstrumentPresetReducer","state","action","type","payload","instrument","number","slotNumber","loaded","Object","keys","filter","slot"],"mappings":"AAAA,MAAMA,aAAa,GAAG;AACpBC,EAAAA,MAAM,EAAE;AADY,CAAtB;;AAIA,MAAMC,uBAAuB,GAAG,CAACC,KAAK,GAAGH,aAAT,EAAwBI,MAAxB,KAAmC;AACjE,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,gBAAL;AACE,aAAO,EACL,GAAGF,KADE;AAELF,QAAAA,MAAM,EAAE,EACN,GAAGE,KAAK,CAACF,MADH;AAEN,WAAE,GAAEG,MAAM,CAACE,OAAP,CAAeC,UAAW,GAAEH,MAAM,CAACE,OAAP,CAAeE,MAAO,EAAtD,GAA0D;AACxDC,YAAAA,UAAU,EAAEL,MAAM,CAACE,OAAP,CAAeE,MAD6B;AAExDD,YAAAA,UAAU,EAAEH,MAAM,CAACE,OAAP,CAAeC,UAF6B;AAGxDG,YAAAA,MAAM,EAAEN,MAAM,CAACE,OAAP,CAAeI;AAHiC;AAFpD;AAFH,OAAP;;AAWF,SAAK,kBAAL;AACE,aAAO,EACL,GAAGP,KADE;AAELF,QAAAA,MAAM,EAAEU,MAAM,CAACC,IAAP,CAAYT,KAAK,CAACF,MAAlB,EAA0BY,MAA1B,CAAkCC,IAAD,IAAU;AACjD,iBAAOb,MAAP;AACD,SAFO;AAFH,OAAP;;AAMF;AACE,aAAOE,KAAP;AArBJ;AAuBD,CAxBD;;AA0BA,eAAeD,uBAAf","sourcesContent":["const INITIAL_STATE = {\n  preset: {},\n}\n\nconst InstrumentPresetReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case \"SEND_SLOT_INFO\":\n      return {\n        ...state,\n        preset: {\n          ...state.preset,\n          [`${action.payload.instrument}${action.payload.number}`]: {\n            slotNumber: action.payload.number,\n            instrument: action.payload.instrument,\n            loaded: action.payload.loaded,\n          },\n        },\n      }\n    case \"REMOVE_SLOT_INFO\":\n      return {\n        ...state,\n        preset: Object.keys(state.preset).filter((slot) => {\n          return preset\n        }),\n      }\n    default:\n      return state\n  }\n}\n\nexport default InstrumentPresetReducer\n"]},"metadata":{},"sourceType":"module"}
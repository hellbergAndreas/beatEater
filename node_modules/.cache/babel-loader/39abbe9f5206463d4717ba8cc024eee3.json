{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\nconst config = {\n  apiKey: \"AIzaSyANEZ-_zv0oeKqsAJigZ_-Kb5gHGt4zSps\",\n  authDomain: \"getshitdone-e7f87.firebaseapp.com\",\n  databaseURL: \"https://getshitdone-e7f87.firebaseio.com\",\n  projectId: \"getshitdone-e7f87\",\n  storageBucket: \"getshitdone-e7f87.appspot.com\",\n  messagingSenderId: \"344852769619\",\n  appId: \"1:344852769619:web:af98a2f8dce124000d8fa6\"\n};\nconst fireApp = firebase.initializeApp(config);\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log(\"error creating user\", error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const converCollectionsSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const task = doc.data();\n    return {\n      task\n    };\n  });\n  const mapped = transformedCollection.map(el => {\n    return el.task;\n  });\n  return mapped;\n};\nconst db = fireApp.firestore();\nexport { db };\nexport const addPreset = (collectionKey, task) => {\n  let random = Math.random();\n  let key = random.toString();\n  console.log(key);\n  db.collection(collectionKey).doc(key).set({\n    header: task.header,\n    description: task.description,\n    stage: task.stage,\n    id: key\n  });\n};\nexport const deleteTaskDocument = (collectionKey, key) => {\n  let stringKey = key.toString();\n  db.collection(collectionKey).doc(stringKey).delete();\n};\nexport const updateTaskDocument = (collectionKey, key, newStage) => {\n  let stringKey = key.toString();\n  db.collection(collectionKey).doc(stringKey).update({\n    stage: newStage\n  });\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["/Users/andreashellberg/Desktop/programmeringsprojekt/beatEater/src/firebase/firebase.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","fireApp","initializeApp","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","converCollectionsSnapshotToMap","collections","transformedCollection","docs","map","task","data","mapped","el","db","addPreset","collectionKey","random","Math","key","toString","collection","header","description","stage","id","deleteTaskDocument","stringKey","delete","updateTaskDocument","newStage","update","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAO,eAAP;AAEA,MAAMC,MAAM,GAAG;AACbC,EAAAA,MAAM,EAAE,yCADK;AAEbC,EAAAA,UAAU,EAAE,mCAFC;AAGbC,EAAAA,WAAW,EAAE,0CAHA;AAIbC,EAAAA,SAAS,EAAE,mBAJE;AAKbC,EAAAA,aAAa,EAAE,+BALF;AAMbC,EAAAA,iBAAiB,EAAE,cANN;AAObC,EAAAA,KAAK,EAAE;AAPM,CAAf;AAUA,MAAMC,OAAO,GAAGT,QAAQ,CAACU,aAAT,CAAuBT,MAAvB,CAAhB;AAEA,OAAO,MAAMU,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AAC3E,MAAI,CAACD,QAAL,EAAe;AAEf,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQJ,QAAQ,CAACK,GAAI,EAApC,CAAhB;AAEA,QAAMC,QAAQ,GAAG,MAAMJ,OAAO,CAACK,GAAR,EAAvB;;AAEA,MAAI,CAACD,QAAQ,CAACE,MAAd,EAAsB;AACpB,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAAyBV,QAA/B;AACA,UAAMW,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AACA,QAAI;AACF,YAAMV,OAAO,CAACW,GAAR,CAAY;AAChBJ,QAAAA,WADgB;AAEhBC,QAAAA,KAFgB;AAGhBC,QAAAA,SAHgB;AAIhB,WAAGV;AAJa,OAAZ,CAAN;AAMD,KAPD,CAOE,OAAOa,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCF,KAAK,CAACG,OAAzC;AACD;AACF;;AAED,SAAOf,OAAP;AACD,CAvBM;AAyBP,OAAO,MAAMgB,8BAA8B,GAAIC,WAAD,IAAiB;AAC7D,QAAMC,qBAAqB,GAAGD,WAAW,CAACE,IAAZ,CAAiBC,GAAjB,CAAsBlB,GAAD,IAAS;AAC1D,UAAMmB,IAAI,GAAGnB,GAAG,CAACoB,IAAJ,EAAb;AACA,WAAO;AACLD,MAAAA;AADK,KAAP;AAGD,GAL6B,CAA9B;AAMA,QAAME,MAAM,GAAGL,qBAAqB,CAACE,GAAtB,CAA2BI,EAAD,IAAQ;AAC/C,WAAOA,EAAE,CAACH,IAAV;AACD,GAFc,CAAf;AAIA,SAAOE,MAAP;AACD,CAZM;AAaP,MAAME,EAAE,GAAG9B,OAAO,CAACM,SAAR,EAAX;AACA,SAASwB,EAAT;AAEA,OAAO,MAAMC,SAAS,GAAG,CAACC,aAAD,EAAgBN,IAAhB,KAAyB;AAChD,MAAIO,MAAM,GAAGC,IAAI,CAACD,MAAL,EAAb;AACA,MAAIE,GAAG,GAAGF,MAAM,CAACG,QAAP,EAAV;AACAlB,EAAAA,OAAO,CAACC,GAAR,CAAYgB,GAAZ;AAEAL,EAAAA,EAAE,CAACO,UAAH,CAAcL,aAAd,EAA6BzB,GAA7B,CAAiC4B,GAAjC,EAAsCnB,GAAtC,CAA0C;AACxCsB,IAAAA,MAAM,EAAEZ,IAAI,CAACY,MAD2B;AAExCC,IAAAA,WAAW,EAAEb,IAAI,CAACa,WAFsB;AAGxCC,IAAAA,KAAK,EAAEd,IAAI,CAACc,KAH4B;AAIxCC,IAAAA,EAAE,EAAEN;AAJoC,GAA1C;AAMD,CAXM;AAaP,OAAO,MAAMO,kBAAkB,GAAG,CAACV,aAAD,EAAgBG,GAAhB,KAAwB;AACxD,MAAIQ,SAAS,GAAGR,GAAG,CAACC,QAAJ,EAAhB;AACAN,EAAAA,EAAE,CAACO,UAAH,CAAcL,aAAd,EAA6BzB,GAA7B,CAAiCoC,SAAjC,EAA4CC,MAA5C;AACD,CAHM;AAKP,OAAO,MAAMC,kBAAkB,GAAG,CAACb,aAAD,EAAgBG,GAAhB,EAAqBW,QAArB,KAAkC;AAClE,MAAIH,SAAS,GAAGR,GAAG,CAACC,QAAJ,EAAhB;AACAN,EAAAA,EAAE,CAACO,UAAH,CAAcL,aAAd,EAA6BzB,GAA7B,CAAiCoC,SAAjC,EAA4CI,MAA5C,CAAmD;AACjDP,IAAAA,KAAK,EAAEM;AAD0C,GAAnD;AAGD,CALM;AAOP,OAAO,MAAME,IAAI,GAAGzD,QAAQ,CAACyD,IAAT,EAAb;AACP,OAAO,MAAM1C,SAAS,GAAGf,QAAQ,CAACe,SAAT,EAAlB;AAEP,MAAM2C,QAAQ,GAAG,IAAI1D,QAAQ,CAACyD,IAAT,CAAcE,kBAAlB,EAAjB;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA7B;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA/B;AAEP,eAAe1D,QAAf","sourcesContent":["import firebase from \"firebase/app\"\nimport \"firebase/firestore\"\nimport \"firebase/auth\"\n\nconst config = {\n  apiKey: \"AIzaSyANEZ-_zv0oeKqsAJigZ_-Kb5gHGt4zSps\",\n  authDomain: \"getshitdone-e7f87.firebaseapp.com\",\n  databaseURL: \"https://getshitdone-e7f87.firebaseio.com\",\n  projectId: \"getshitdone-e7f87\",\n  storageBucket: \"getshitdone-e7f87.appspot.com\",\n  messagingSenderId: \"344852769619\",\n  appId: \"1:344852769619:web:af98a2f8dce124000d8fa6\",\n}\n\nconst fireApp = firebase.initializeApp(config)\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`)\n\n  const snapShot = await userRef.get()\n\n  if (!snapShot.exists) {\n    const { displayName, email } = userAuth\n    const createdAt = new Date()\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData,\n      })\n    } catch (error) {\n      console.log(\"error creating user\", error.message)\n    }\n  }\n\n  return userRef\n}\n\nexport const converCollectionsSnapshotToMap = (collections) => {\n  const transformedCollection = collections.docs.map((doc) => {\n    const task = doc.data()\n    return {\n      task,\n    }\n  })\n  const mapped = transformedCollection.map((el) => {\n    return el.task\n  })\n\n  return mapped\n}\nconst db = fireApp.firestore()\nexport { db }\n\nexport const addPreset = (collectionKey, task) => {\n  let random = Math.random()\n  let key = random.toString()\n  console.log(key)\n\n  db.collection(collectionKey).doc(key).set({\n    header: task.header,\n    description: task.description,\n    stage: task.stage,\n    id: key,\n  })\n}\n\nexport const deleteTaskDocument = (collectionKey, key) => {\n  let stringKey = key.toString()\n  db.collection(collectionKey).doc(stringKey).delete()\n}\n\nexport const updateTaskDocument = (collectionKey, key, newStage) => {\n  let stringKey = key.toString()\n  db.collection(collectionKey).doc(stringKey).update({\n    stage: newStage,\n  })\n}\n\nexport const auth = firebase.auth()\nexport const firestore = firebase.firestore()\n\nconst provider = new firebase.auth.GoogleAuthProvider()\nprovider.setCustomParameters({ prompt: \"select_account\" })\nexport const signInWithGoogle = () => auth.signInWithPopup(provider)\n\nexport default firebase\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/andreashellberg/Desktop/programmeringsprojekt/beatEater/src/components/instrument-board/slots/slot.jsx\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Howl } from \"howler\";\nimport { sendSlotInfoToStore } from \"../../../redux/instrument-preset/isntrument.action\";\nimport \"./slot.styles.scss\";\n\nclass Slot extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.playSound = () => {\n      const src = this.props.instrument;\n      let audioEl = new Howl({\n        src\n      });\n\n      if (src.includes(\"/ho\")) {\n        audioEl.volume(0.7);\n      } else if (src.includes(\"/hh\")) {\n        audioEl.volume(0.5);\n      }\n\n      audioEl.play();\n    };\n\n    this.loadSlotWithSound = e => {\n      let slotInfo = {\n        loaded: true,\n        instrument: this.props.name,\n        number: this.props.number\n      };\n      this.checkStoreForSlotInfo(slotInfo);\n      this.props.sendSlotInfoToStore(slotInfo);\n    };\n\n    this.slotNameInStore = `${this.props.name}${this.props.number}`;\n  }\n\n  componentDidMount() {}\n\n  componentDidUpdate() {\n    let {\n      number,\n      time: {\n        time\n      }\n    } = this.props;\n    this.checkStoreForSlotInfo(); // if (\n    //   number === time &&\n    //   this.props.preset.preset[this.slotNameInStore].loaded\n    // ) {\n    //   this.playSound()\n    // }\n    // this.props.sendSlotInfoToStore(this.state)\n    // console.log(this.props)\n  }\n\n  checkStoreForSlotInfo(slotInfo) {\n    if (!this.props.preset.preset[this.slotNameInStore]) {\n      return false;\n    } else {\n      slotInfo.loaded = !this.props.preset.preset[this.slotNameInStore].loaded;\n      return true;\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      onClick: e => this.loadSlotWithSound(e),\n      className: `instrumentBoard__slotRow__slot ${this.props.number === this.props.time.time ? \"instrumentBoard__slotRow__slot__active active\" : \"\"}\n        `,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 7\n      }\n    });\n  }\n\n} //  ${\n//    this.state.loaded\n//      ? \"instrumentBoard__slotRow__slot__loaded loaded\"\n//      : \"\"\n//  }\n\n\nconst mapStateToProps = state => ({\n  time: state.time,\n  preset: state.preset\n});\n\nconst mapDispatchToProps = dispatch => ({\n  sendSlotInfoToStore: slotInfo => dispatch(sendSlotInfoToStore(slotInfo)),\n  removeSlotInfoFromStore: slotName => dispatch(removeSlotInfoFromStore(slotName))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Slot);","map":{"version":3,"sources":["/Users/andreashellberg/Desktop/programmeringsprojekt/beatEater/src/components/instrument-board/slots/slot.jsx"],"names":["React","connect","Howl","sendSlotInfoToStore","Slot","Component","constructor","props","playSound","src","instrument","audioEl","includes","volume","play","loadSlotWithSound","e","slotInfo","loaded","name","number","checkStoreForSlotInfo","slotNameInStore","componentDidMount","componentDidUpdate","time","preset","render","mapStateToProps","state","mapDispatchToProps","dispatch","removeSlotInfoFromStore","slotName"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport { connect } from \"react-redux\"\nimport { Howl } from \"howler\"\nimport { sendSlotInfoToStore } from \"../../../redux/instrument-preset/isntrument.action\"\n\nimport \"./slot.styles.scss\"\n\nclass Slot extends React.Component {\n  constructor(props) {\n    super(props)\n    this.slotNameInStore = `${this.props.name}${this.props.number}`\n  }\n  componentDidMount() {}\n  componentDidUpdate() {\n    let {\n      number,\n      time: { time },\n    } = this.props\n\n    this.checkStoreForSlotInfo()\n    // if (\n    //   number === time &&\n    //   this.props.preset.preset[this.slotNameInStore].loaded\n    // ) {\n    //   this.playSound()\n    // }\n\n    // this.props.sendSlotInfoToStore(this.state)\n    // console.log(this.props)\n  }\n\n  playSound = () => {\n    const src = this.props.instrument\n    let audioEl = new Howl({\n      src,\n    })\n    if (src.includes(\"/ho\")) {\n      audioEl.volume(0.7)\n    } else if (src.includes(\"/hh\")) {\n      audioEl.volume(0.5)\n    }\n    audioEl.play()\n  }\n\n  loadSlotWithSound = (e) => {\n    let slotInfo = {\n      loaded: true,\n      instrument: this.props.name,\n      number: this.props.number,\n    }\n    this.checkStoreForSlotInfo(slotInfo)\n    this.props.sendSlotInfoToStore(slotInfo)\n  }\n\n  checkStoreForSlotInfo(slotInfo) {\n    if (!this.props.preset.preset[this.slotNameInStore]) {\n      return false\n    } else {\n      slotInfo.loaded = !this.props.preset.preset[this.slotNameInStore].loaded\n      return true\n    }\n  }\n\n  render() {\n    return (\n      <div\n        onClick={(e) => this.loadSlotWithSound(e)}\n        className={`instrumentBoard__slotRow__slot ${\n          this.props.number === this.props.time.time\n            ? \"instrumentBoard__slotRow__slot__active active\"\n            : \"\"\n        }\n        `}\n      ></div>\n    )\n  }\n}\n//  ${\n//    this.state.loaded\n//      ? \"instrumentBoard__slotRow__slot__loaded loaded\"\n//      : \"\"\n//  }\n\nconst mapStateToProps = (state) => ({\n  time: state.time,\n  preset: state.preset,\n})\nconst mapDispatchToProps = (dispatch) => ({\n  sendSlotInfoToStore: (slotInfo) => dispatch(sendSlotInfoToStore(slotInfo)),\n  removeSlotInfoFromStore: (slotName) =>\n    dispatch(removeSlotInfoFromStore(slotName)),\n})\nexport default connect(mapStateToProps, mapDispatchToProps)(Slot)\n"]},"metadata":{},"sourceType":"module"}